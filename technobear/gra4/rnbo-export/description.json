{
  "parameters": [
    {
      "type": "ParameterTypeNumber",
      "index": 0,
      "name": "rec-layer",
      "paramId": "rec-layer",
      "minimum": 0,
      "maximum": 3,
      "exponent": 1,
      "steps": 4,
      "initialValue": 0,
      "isEnum": false,
      "enumValues": [],
      "displayName": "Layer",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s06",
      "constrainFunc": "param_25_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 1,
      "name": "rec-mon",
      "paramId": "rec-mon",
      "minimum": 0,
      "maximum": 100,
      "exponent": 1,
      "steps": 101,
      "initialValue": 100,
      "isEnum": false,
      "enumValues": [],
      "displayName": "Monitor",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s07",
      "constrainFunc": "param_26_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 2,
      "name": "rec-mode",
      "paramId": "rec-mode",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 2,
      "initialValue": 0,
      "isEnum": true,
      "enumValues": [
        "Stop",
        "Record"
      ],
      "displayName": "Record",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s05",
      "constrainFunc": "param_27_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 3,
      "name": "rec-gain",
      "paramId": "rec-gain",
      "minimum": 0,
      "maximum": 10,
      "exponent": 1,
      "steps": 101,
      "initialValue": 1,
      "isEnum": false,
      "enumValues": [],
      "displayName": "Gain",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s04",
      "constrainFunc": "param_28_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 4,
      "name": "rec-loop",
      "paramId": "rec-loop",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 2,
      "initialValue": 1,
      "isEnum": true,
      "enumValues": [
        "false",
        "true"
      ],
      "displayName": "Loop",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s03",
      "constrainFunc": "param_29_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 5,
      "name": "rec-begin",
      "paramId": "rec-begin",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 101,
      "initialValue": 0,
      "isEnum": false,
      "enumValues": [],
      "displayName": "Begin",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s02",
      "constrainFunc": "param_30_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 6,
      "name": "rec-end",
      "paramId": "rec-end",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 101,
      "initialValue": 1,
      "isEnum": false,
      "enumValues": [],
      "displayName": "End",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s01",
      "constrainFunc": "param_31_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 7,
      "name": "toggle_01_value",
      "paramId": "toggle_obj-40/value",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 0,
      "initialValue": 0,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": 0,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": false,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "toggle_s01"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 8,
      "name": "start",
      "paramId": "layer1/start",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 101,
      "initialValue": 0,
      "isEnum": false,
      "enumValues": [],
      "displayName": "Start",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s06",
      "constrainFunc": "param_01_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 9,
      "name": "len",
      "paramId": "layer1/len",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 101,
      "initialValue": 1,
      "isEnum": false,
      "enumValues": [],
      "displayName": "Length",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s04",
      "constrainFunc": "param_02_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 10,
      "name": "gain",
      "paramId": "layer1/gain",
      "minimum": 0,
      "maximum": 10,
      "exponent": 1,
      "steps": 101,
      "initialValue": 1,
      "isEnum": false,
      "enumValues": [],
      "displayName": "Gain",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s03",
      "constrainFunc": "param_03_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 11,
      "name": "rate",
      "paramId": "layer1/rate",
      "minimum": -4,
      "maximum": 4,
      "exponent": 1,
      "steps": 0,
      "initialValue": 1,
      "isEnum": false,
      "enumValues": [],
      "displayName": "Rate",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s05",
      "constrainFunc": "param_04_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 12,
      "name": "pan",
      "paramId": "layer1/pan",
      "minimum": -1,
      "maximum": 1,
      "exponent": 1,
      "steps": 0,
      "initialValue": 0,
      "isEnum": false,
      "enumValues": [],
      "displayName": "Pan",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s02",
      "constrainFunc": "param_05_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 13,
      "name": "size",
      "paramId": "layer1/size",
      "minimum": 0,
      "maximum": 180,
      "exponent": 1,
      "steps": 0,
      "initialValue": 1,
      "isEnum": false,
      "enumValues": [],
      "displayName": "Size",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s01",
      "constrainFunc": "param_06_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 14,
      "name": "start",
      "paramId": "layer3/start",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 101,
      "initialValue": 0,
      "isEnum": false,
      "enumValues": [],
      "displayName": "Start",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s06",
      "constrainFunc": "param_07_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 15,
      "name": "len",
      "paramId": "layer3/len",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 101,
      "initialValue": 1,
      "isEnum": false,
      "enumValues": [],
      "displayName": "Length",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s04",
      "constrainFunc": "param_08_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 16,
      "name": "gain",
      "paramId": "layer3/gain",
      "minimum": 0,
      "maximum": 10,
      "exponent": 1,
      "steps": 101,
      "initialValue": 1,
      "isEnum": false,
      "enumValues": [],
      "displayName": "Gain",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s03",
      "constrainFunc": "param_09_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 17,
      "name": "rate",
      "paramId": "layer3/rate",
      "minimum": -4,
      "maximum": 4,
      "exponent": 1,
      "steps": 0,
      "initialValue": 1,
      "isEnum": false,
      "enumValues": [],
      "displayName": "Rate",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s05",
      "constrainFunc": "param_10_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 18,
      "name": "pan",
      "paramId": "layer3/pan",
      "minimum": -1,
      "maximum": 1,
      "exponent": 1,
      "steps": 0,
      "initialValue": 0,
      "isEnum": false,
      "enumValues": [],
      "displayName": "Pan",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s02",
      "constrainFunc": "param_11_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 19,
      "name": "size",
      "paramId": "layer3/size",
      "minimum": 0,
      "maximum": 180,
      "exponent": 1,
      "steps": 0,
      "initialValue": 1,
      "isEnum": false,
      "enumValues": [],
      "displayName": "Size",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s01",
      "constrainFunc": "param_12_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 20,
      "name": "start",
      "paramId": "layer2/start",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 101,
      "initialValue": 0,
      "isEnum": false,
      "enumValues": [],
      "displayName": "Start",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s06",
      "constrainFunc": "param_13_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 21,
      "name": "len",
      "paramId": "layer2/len",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 101,
      "initialValue": 1,
      "isEnum": false,
      "enumValues": [],
      "displayName": "Length",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s04",
      "constrainFunc": "param_14_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 22,
      "name": "gain",
      "paramId": "layer2/gain",
      "minimum": 0,
      "maximum": 10,
      "exponent": 1,
      "steps": 101,
      "initialValue": 1,
      "isEnum": false,
      "enumValues": [],
      "displayName": "Gain",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s03",
      "constrainFunc": "param_15_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 23,
      "name": "rate",
      "paramId": "layer2/rate",
      "minimum": -4,
      "maximum": 4,
      "exponent": 1,
      "steps": 0,
      "initialValue": 1,
      "isEnum": false,
      "enumValues": [],
      "displayName": "Rate",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s05",
      "constrainFunc": "param_16_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 24,
      "name": "pan",
      "paramId": "layer2/pan",
      "minimum": -1,
      "maximum": 1,
      "exponent": 1,
      "steps": 0,
      "initialValue": 0,
      "isEnum": false,
      "enumValues": [],
      "displayName": "Pan",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s02",
      "constrainFunc": "param_17_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 25,
      "name": "size",
      "paramId": "layer2/size",
      "minimum": 0,
      "maximum": 180,
      "exponent": 1,
      "steps": 0,
      "initialValue": 1,
      "isEnum": false,
      "enumValues": [],
      "displayName": "Size",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s01",
      "constrainFunc": "param_18_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 26,
      "name": "start",
      "paramId": "layer4/start",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 101,
      "initialValue": 0,
      "isEnum": false,
      "enumValues": [],
      "displayName": "Start",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s06",
      "constrainFunc": "param_19_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 27,
      "name": "len",
      "paramId": "layer4/len",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 101,
      "initialValue": 1,
      "isEnum": false,
      "enumValues": [],
      "displayName": "Length",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s04",
      "constrainFunc": "param_20_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 28,
      "name": "gain",
      "paramId": "layer4/gain",
      "minimum": 0,
      "maximum": 10,
      "exponent": 1,
      "steps": 101,
      "initialValue": 1,
      "isEnum": false,
      "enumValues": [],
      "displayName": "Gain",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s03",
      "constrainFunc": "param_21_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 29,
      "name": "rate",
      "paramId": "layer4/rate",
      "minimum": -4,
      "maximum": 4,
      "exponent": 1,
      "steps": 0,
      "initialValue": 1,
      "isEnum": false,
      "enumValues": [],
      "displayName": "Rate",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s05",
      "constrainFunc": "param_22_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 30,
      "name": "pan",
      "paramId": "layer4/pan",
      "minimum": -1,
      "maximum": 1,
      "exponent": 1,
      "steps": 0,
      "initialValue": 0,
      "isEnum": false,
      "enumValues": [],
      "displayName": "Pan",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s02",
      "constrainFunc": "param_23_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 31,
      "name": "size",
      "paramId": "layer4/size",
      "minimum": 0,
      "maximum": 180,
      "exponent": 1,
      "steps": 0,
      "initialValue": 1,
      "isEnum": false,
      "enumValues": [],
      "displayName": "Size",
      "unit": "",
      "order": 0,
      "displayorder": "-",
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s01",
      "constrainFunc": "param_24_value_constrain"
    }
  ],
  "numParameters": 32,
  "numSignalInParameters": 0,
  "numSignalOutParameters": 0,
  "numInputChannels": 24,
  "numOutputChannels": 11,
  "numMidiInputPorts": 0,
  "numMidiOutputPorts": 0,
  "externalDataRefs": [
    {
      "id": "layer1",
      "type": "Float32Buffer"
    },
    {
      "id": "layer3",
      "type": "Float32Buffer"
    },
    {
      "id": "layer2",
      "type": "Float32Buffer"
    },
    {
      "id": "layer4",
      "type": "Float32Buffer"
    }
  ],
  "patcherSerial": 0,
  "inports": [],
  "outports": [],
  "inlets": [
    {
      "type": "signal",
      "index": 1,
      "tag": "in1",
      "meta": ""
    },
    {
      "type": "signal",
      "index": 2,
      "tag": "in2",
      "meta": "",
      "comment": "layer1/trigger"
    },
    {
      "type": "signal",
      "index": 3,
      "tag": "in3",
      "meta": "",
      "comment": "layer1/start"
    },
    {
      "type": "signal",
      "index": 4,
      "tag": "in4",
      "meta": "",
      "comment": "layer1/length"
    },
    {
      "type": "signal",
      "index": 5,
      "tag": "in5",
      "meta": "",
      "comment": "layer1/rate"
    },
    {
      "type": "signal",
      "index": 6,
      "tag": "in6",
      "meta": "",
      "comment": "layer1/pan"
    },
    {
      "type": "signal",
      "index": 7,
      "tag": "in7",
      "meta": "",
      "comment": "layer2/trigger"
    },
    {
      "type": "signal",
      "index": 8,
      "tag": "in8",
      "meta": "",
      "comment": "layer2/start"
    },
    {
      "type": "signal",
      "index": 9,
      "tag": "in9",
      "meta": "",
      "comment": "layer2/length"
    },
    {
      "type": "signal",
      "index": 10,
      "tag": "in10",
      "meta": "",
      "comment": "layer2/rate"
    },
    {
      "type": "signal",
      "index": 11,
      "tag": "in11",
      "meta": "",
      "comment": "layer2/pan"
    },
    {
      "type": "signal",
      "index": 12,
      "tag": "in12",
      "meta": "",
      "comment": "layer3/trigger"
    },
    {
      "type": "signal",
      "index": 13,
      "tag": "in13",
      "meta": "",
      "comment": "layer3/start"
    },
    {
      "type": "signal",
      "index": 14,
      "tag": "in14",
      "meta": "",
      "comment": "layer3/length"
    },
    {
      "type": "signal",
      "index": 15,
      "tag": "in15",
      "meta": "",
      "comment": "layer3/rate"
    },
    {
      "type": "signal",
      "index": 16,
      "tag": "in16",
      "meta": "",
      "comment": "layer3/pan"
    },
    {
      "type": "signal",
      "index": 17,
      "tag": "in17",
      "meta": "",
      "comment": "layer4/trigger"
    },
    {
      "type": "signal",
      "index": 18,
      "tag": "in18",
      "meta": "",
      "comment": "layer4/start"
    },
    {
      "type": "signal",
      "index": 19,
      "tag": "in19",
      "meta": "",
      "comment": "layer4/length"
    },
    {
      "type": "signal",
      "index": 20,
      "tag": "in20",
      "meta": "",
      "comment": "layer4/rate"
    },
    {
      "type": "signal",
      "index": 21,
      "tag": "in21",
      "meta": "",
      "comment": "layer4/pan"
    },
    {
      "type": "signal",
      "index": 22,
      "tag": "in22",
      "meta": "",
      "comment": "rec-mode"
    },
    {
      "type": "signal",
      "index": 23,
      "tag": "in23",
      "meta": "",
      "comment": "rec-begin"
    },
    {
      "type": "signal",
      "index": 24,
      "tag": "in24",
      "meta": "",
      "comment": "rec-end"
    }
  ],
  "outlets": [
    {
      "type": "signal",
      "index": 1,
      "tag": "out1",
      "meta": "",
      "comment": "sum-l"
    },
    {
      "type": "signal",
      "index": 2,
      "tag": "out2",
      "meta": "",
      "comment": "sum-r"
    },
    {
      "type": "signal",
      "index": 3,
      "tag": "out3",
      "meta": "",
      "comment": "layer1-l"
    },
    {
      "type": "signal",
      "index": 4,
      "tag": "out4",
      "meta": "",
      "comment": "layer1-r"
    },
    {
      "type": "signal",
      "index": 5,
      "tag": "out5",
      "meta": "",
      "comment": "layer2-l"
    },
    {
      "type": "signal",
      "index": 6,
      "tag": "out6",
      "meta": "",
      "comment": "layer2-r"
    },
    {
      "type": "signal",
      "index": 7,
      "tag": "out7",
      "meta": "",
      "comment": "layer3-l"
    },
    {
      "type": "signal",
      "index": 8,
      "tag": "out8",
      "meta": "",
      "comment": "layer3-r"
    },
    {
      "type": "signal",
      "index": 9,
      "tag": "out9",
      "meta": "",
      "comment": "layer4-l"
    },
    {
      "type": "signal",
      "index": 10,
      "tag": "out10",
      "meta": "",
      "comment": "layer4-r"
    },
    {
      "type": "signal",
      "index": 11,
      "tag": "out11",
      "meta": "",
      "comment": "record-pos"
    }
  ],
  "paramConversion": {
    "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
    "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 7:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    case 2:\n    case 4:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 2);\n            }\n\n            return normalizedValue;\n        }\n    case 5:\n    case 6:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 101);\n            }\n\n            return normalizedValue;\n        }\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 3 ? 3 : value));\n            let normalizedValue = (value - 0) / (3 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 4);\n            }\n\n            return normalizedValue;\n        }\n    case 3:\n        {\n            value = (value < 0 ? 0 : (value > 10 ? 10 : value));\n            let normalizedValue = (value - 0) / (10 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 101);\n            }\n\n            return normalizedValue;\n        }\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 100 ? 100 : value));\n            let normalizedValue = (value - 0) / (100 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 101);\n            }\n\n            return normalizedValue;\n        }\n    default:\n        index -= 8;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_03.getNumParameters();\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
    "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 7:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 2:\n    case 4:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 2);\n            }\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 5:\n    case 6:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 101);\n            }\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 4);\n            }\n\n            {\n                return 0 + value * (3 - 0);\n            }\n        }\n    case 3:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 101);\n            }\n\n            {\n                return 0 + value * (10 - 0);\n            }\n        }\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 101);\n            }\n\n            {\n                return 0 + value * (100 - 0);\n            }\n        }\n    default:\n        index -= 8;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_03.getNumParameters();\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
    "getNumParameters": "function getNumParameters() {\n    return 8 + this.p_01.getNumParameters() + this.p_02.getNumParameters() + this.p_03.getNumParameters() + this.p_04.getNumParameters();\n}",
    "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 3 ? 3 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 3 / 3;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 100 / 100;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 2:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 1 / 1;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 3:\n        {\n            v = (v > 10 ? 10 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 10 / 100;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 4:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 1 / 1;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 5:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 1 / 100;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 6:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 1 / 100;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    default:\n        index -= 8;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.constrainParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.constrainParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.constrainParameterValue(index, value);\n\n        index -= this.p_03.getNumParameters();\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
    "subpatches": {
      "p_01": {
        "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
        "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 101);\n            }\n\n            return normalizedValue;\n        }\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 10 ? 10 : value));\n            let normalizedValue = (value - 0) / (10 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 101);\n            }\n\n            return normalizedValue;\n        }\n    case 5:\n        {\n            value = (value < 0 ? 0 : (value > 180 ? 180 : value));\n            let normalizedValue = (value - 0) / (180 - 0);\n            return normalizedValue;\n        }\n    case 3:\n        {\n            value = (value < -4 ? -4 : (value > 4 ? 4 : value));\n            let normalizedValue = (value - -4) / (4 - -4);\n            return normalizedValue;\n        }\n    case 4:\n        {\n            value = (value < -1 ? -1 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - -1) / (1 - -1);\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
        "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 101);\n            }\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 101);\n            }\n\n            {\n                return 0 + value * (10 - 0);\n            }\n        }\n    case 5:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (180 - 0);\n            }\n        }\n    case 3:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return -4 + value * (4 - -4);\n            }\n        }\n    case 4:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return -1 + value * (1 - -1);\n            }\n        }\n    default:\n        return value;\n    }\n}",
        "getNumParameters": "function getNumParameters() {\n    return 6;\n}",
        "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 1 / 100;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 1 / 100;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 2:\n        {\n            v = (v > 10 ? 10 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 10 / 100;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 3:\n        {\n            v = (v > 4 ? 4 : (v < -4 ? -4 : v));\n            return v;\n        }\n    case 4:\n        {\n            v = (v > 1 ? 1 : (v < -1 ? -1 : v));\n            return v;\n        }\n    case 5:\n        {\n            v = (v > 180 ? 180 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        return value;\n    }\n}",
        "subpatches": {},
        "isPolyphonic": false
      },
      "p_02": {
        "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
        "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 101);\n            }\n\n            return normalizedValue;\n        }\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 10 ? 10 : value));\n            let normalizedValue = (value - 0) / (10 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 101);\n            }\n\n            return normalizedValue;\n        }\n    case 5:\n        {\n            value = (value < 0 ? 0 : (value > 180 ? 180 : value));\n            let normalizedValue = (value - 0) / (180 - 0);\n            return normalizedValue;\n        }\n    case 3:\n        {\n            value = (value < -4 ? -4 : (value > 4 ? 4 : value));\n            let normalizedValue = (value - -4) / (4 - -4);\n            return normalizedValue;\n        }\n    case 4:\n        {\n            value = (value < -1 ? -1 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - -1) / (1 - -1);\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
        "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 101);\n            }\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 101);\n            }\n\n            {\n                return 0 + value * (10 - 0);\n            }\n        }\n    case 5:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (180 - 0);\n            }\n        }\n    case 3:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return -4 + value * (4 - -4);\n            }\n        }\n    case 4:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return -1 + value * (1 - -1);\n            }\n        }\n    default:\n        return value;\n    }\n}",
        "getNumParameters": "function getNumParameters() {\n    return 6;\n}",
        "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 1 / 100;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 1 / 100;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 2:\n        {\n            v = (v > 10 ? 10 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 10 / 100;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 3:\n        {\n            v = (v > 4 ? 4 : (v < -4 ? -4 : v));\n            return v;\n        }\n    case 4:\n        {\n            v = (v > 1 ? 1 : (v < -1 ? -1 : v));\n            return v;\n        }\n    case 5:\n        {\n            v = (v > 180 ? 180 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        return value;\n    }\n}",
        "subpatches": {},
        "isPolyphonic": false
      },
      "p_03": {
        "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
        "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 101);\n            }\n\n            return normalizedValue;\n        }\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 10 ? 10 : value));\n            let normalizedValue = (value - 0) / (10 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 101);\n            }\n\n            return normalizedValue;\n        }\n    case 5:\n        {\n            value = (value < 0 ? 0 : (value > 180 ? 180 : value));\n            let normalizedValue = (value - 0) / (180 - 0);\n            return normalizedValue;\n        }\n    case 3:\n        {\n            value = (value < -4 ? -4 : (value > 4 ? 4 : value));\n            let normalizedValue = (value - -4) / (4 - -4);\n            return normalizedValue;\n        }\n    case 4:\n        {\n            value = (value < -1 ? -1 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - -1) / (1 - -1);\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
        "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 101);\n            }\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 101);\n            }\n\n            {\n                return 0 + value * (10 - 0);\n            }\n        }\n    case 5:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (180 - 0);\n            }\n        }\n    case 3:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return -4 + value * (4 - -4);\n            }\n        }\n    case 4:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return -1 + value * (1 - -1);\n            }\n        }\n    default:\n        return value;\n    }\n}",
        "getNumParameters": "function getNumParameters() {\n    return 6;\n}",
        "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 1 / 100;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 1 / 100;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 2:\n        {\n            v = (v > 10 ? 10 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 10 / 100;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 3:\n        {\n            v = (v > 4 ? 4 : (v < -4 ? -4 : v));\n            return v;\n        }\n    case 4:\n        {\n            v = (v > 1 ? 1 : (v < -1 ? -1 : v));\n            return v;\n        }\n    case 5:\n        {\n            v = (v > 180 ? 180 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        return value;\n    }\n}",
        "subpatches": {},
        "isPolyphonic": false
      },
      "p_04": {
        "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
        "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 101);\n            }\n\n            return normalizedValue;\n        }\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 10 ? 10 : value));\n            let normalizedValue = (value - 0) / (10 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 101);\n            }\n\n            return normalizedValue;\n        }\n    case 5:\n        {\n            value = (value < 0 ? 0 : (value > 180 ? 180 : value));\n            let normalizedValue = (value - 0) / (180 - 0);\n            return normalizedValue;\n        }\n    case 3:\n        {\n            value = (value < -4 ? -4 : (value > 4 ? 4 : value));\n            let normalizedValue = (value - -4) / (4 - -4);\n            return normalizedValue;\n        }\n    case 4:\n        {\n            value = (value < -1 ? -1 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - -1) / (1 - -1);\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
        "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 101);\n            }\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 101);\n            }\n\n            {\n                return 0 + value * (10 - 0);\n            }\n        }\n    case 5:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (180 - 0);\n            }\n        }\n    case 3:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return -4 + value * (4 - -4);\n            }\n        }\n    case 4:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return -1 + value * (1 - -1);\n            }\n        }\n    default:\n        return value;\n    }\n}",
        "getNumParameters": "function getNumParameters() {\n    return 6;\n}",
        "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 1 / 100;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 1 / 100;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 2:\n        {\n            v = (v > 10 ? 10 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 10 / 100;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 3:\n        {\n            v = (v > 4 ? 4 : (v < -4 ? -4 : v));\n            return v;\n        }\n    case 4:\n        {\n            v = (v > 1 ? 1 : (v < -1 ? -1 : v));\n            return v;\n        }\n    case 5:\n        {\n            v = (v > 180 ? 180 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        return value;\n    }\n}",
        "subpatches": {},
        "isPolyphonic": false
      }
    },
    "isPolyphonic": false
  },
  "presetid": "rnbo",
  "meta": {
    "architecture": "x64",
    "filename": "gra4.maxpat",
    "maxversion": "8.5.2",
    "rnboversion": "1.0.2"
  }
}