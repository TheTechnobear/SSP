{
  "parameters": [
    {
      "type": "ParameterTypeNumber",
      "index": 0,
      "name": "rec_mon",
      "paramId": "rec_mon",
      "minimum": 0,
      "maximum": 100,
      "exponent": 1,
      "steps": 0,
      "initialValue": 100,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s03",
      "constrainFunc": "param_05_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 1,
      "name": "layer",
      "paramId": "layer",
      "minimum": 0,
      "maximum": 3,
      "exponent": 1,
      "steps": 4,
      "initialValue": 0,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s02",
      "constrainFunc": "param_06_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 2,
      "name": "record-mode",
      "paramId": "record-mode",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 2,
      "initialValue": 0,
      "isEnum": true,
      "enumValues": [
        "Stop",
        "Record"
      ],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s01",
      "constrainFunc": "param_07_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 3,
      "name": "toggle_01_value",
      "paramId": "toggle_obj-40/value",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 0,
      "initialValue": 0,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": 0,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": false,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "toggle_s01"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 4,
      "name": "mode",
      "paramId": "layer1/mode",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 2,
      "initialValue": 1,
      "isEnum": true,
      "enumValues": [
        "Play",
        "Stop"
      ],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s01",
      "constrainFunc": "param_01_value_constrain"
    },
    {
      "type": "ParameterTypeBang",
      "index": 5,
      "name": "button_01_bangval",
      "paramId": "layer1/button_obj-43/bangval",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 0,
      "initialValue": 0,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": 0,
      "initialized": false,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": false,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "button_s02"
    },
    {
      "type": "ParameterTypeBang",
      "index": 6,
      "name": "button_02_bangval",
      "paramId": "layer1/button_obj-46/bangval",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 0,
      "initialValue": 0,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": 0,
      "initialized": false,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": false,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "button_s01"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 7,
      "name": "mode",
      "paramId": "layer2/mode",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 2,
      "initialValue": 1,
      "isEnum": true,
      "enumValues": [
        "Play",
        "Stop"
      ],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s02",
      "constrainFunc": "param_02_value_constrain"
    },
    {
      "type": "ParameterTypeBang",
      "index": 8,
      "name": "button_03_bangval",
      "paramId": "layer2/button_obj-43/bangval",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 0,
      "initialValue": 0,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": 0,
      "initialized": false,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": false,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "button_s04"
    },
    {
      "type": "ParameterTypeBang",
      "index": 9,
      "name": "button_04_bangval",
      "paramId": "layer2/button_obj-46/bangval",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 0,
      "initialValue": 0,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": 0,
      "initialized": false,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": false,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "button_s03"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 10,
      "name": "mode",
      "paramId": "layer3/mode",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 2,
      "initialValue": 1,
      "isEnum": true,
      "enumValues": [
        "Play",
        "Stop"
      ],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s02",
      "constrainFunc": "param_03_value_constrain"
    },
    {
      "type": "ParameterTypeBang",
      "index": 11,
      "name": "button_05_bangval",
      "paramId": "layer3/button_obj-43/bangval",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 0,
      "initialValue": 0,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": 0,
      "initialized": false,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": false,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "button_s04"
    },
    {
      "type": "ParameterTypeBang",
      "index": 12,
      "name": "button_06_bangval",
      "paramId": "layer3/button_obj-46/bangval",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 0,
      "initialValue": 0,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": 0,
      "initialized": false,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": false,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "button_s03"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 13,
      "name": "mode",
      "paramId": "layer4/mode",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 2,
      "initialValue": 1,
      "isEnum": true,
      "enumValues": [
        "Play",
        "Stop"
      ],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s02",
      "constrainFunc": "param_04_value_constrain"
    },
    {
      "type": "ParameterTypeBang",
      "index": 14,
      "name": "button_07_bangval",
      "paramId": "layer4/button_obj-43/bangval",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 0,
      "initialValue": 0,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": 0,
      "initialized": false,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": false,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "button_s04"
    },
    {
      "type": "ParameterTypeBang",
      "index": 15,
      "name": "button_08_bangval",
      "paramId": "layer4/button_obj-46/bangval",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 0,
      "initialValue": 0,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": 0,
      "initialized": false,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": false,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "button_s03"
    }
  ],
  "numParameters": 16,
  "numSignalInParameters": 0,
  "numSignalOutParameters": 0,
  "numInputChannels": 1,
  "numOutputChannels": 5,
  "numMidiInputPorts": 0,
  "numMidiOutputPorts": 0,
  "externalDataRefs": [
    {
      "id": "layer1",
      "type": "Float32Buffer"
    },
    {
      "id": "layer2",
      "type": "Float32Buffer"
    },
    {
      "id": "layer3",
      "type": "Float32Buffer"
    },
    {
      "id": "layer4",
      "type": "Float32Buffer"
    }
  ],
  "patcherSerial": 0,
  "inports": [],
  "outports": [],
  "inlets": [
    {
      "type": "signal",
      "index": 1,
      "tag": "in1",
      "meta": ""
    }
  ],
  "outlets": [
    {
      "type": "signal",
      "index": 1,
      "tag": "out1",
      "meta": "",
      "comment": "sum"
    },
    {
      "type": "signal",
      "index": 2,
      "tag": "out2",
      "meta": "",
      "comment": "layer1"
    },
    {
      "type": "signal",
      "index": 3,
      "tag": "out3",
      "meta": "",
      "comment": "layer2"
    },
    {
      "type": "signal",
      "index": 4,
      "tag": "out4",
      "meta": "",
      "comment": "layer3"
    },
    {
      "type": "signal",
      "index": 5,
      "tag": "out5",
      "meta": "",
      "comment": "layer4"
    }
  ],
  "paramConversion": {
    "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
    "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 3:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 2);\n            }\n\n            return normalizedValue;\n        }\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 3 ? 3 : value));\n            let normalizedValue = (value - 0) / (3 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 4);\n            }\n\n            return normalizedValue;\n        }\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 100 ? 100 : value));\n            let normalizedValue = (value - 0) / (100 - 0);\n            return normalizedValue;\n        }\n    default:\n        index -= 4;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_03.getNumParameters();\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
    "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 3:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 2);\n            }\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 4);\n            }\n\n            {\n                return 0 + value * (3 - 0);\n            }\n        }\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (100 - 0);\n            }\n        }\n    default:\n        index -= 4;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_03.getNumParameters();\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
    "getNumParameters": "function getNumParameters() {\n    return 4 + this.p_01.getNumParameters() + this.p_02.getNumParameters() + this.p_03.getNumParameters() + this.p_04.getNumParameters();\n}",
    "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 3 ? 3 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 3 / 3;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 2:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 1 / 1;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    default:\n        index -= 4;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.constrainParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.constrainParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.constrainParameterValue(index, value);\n\n        index -= this.p_03.getNumParameters();\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
    "subpatches": {
      "p_01": {
        "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
        "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 2);\n            }\n\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
        "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 2);\n            }\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    default:\n        return value;\n    }\n}",
        "getNumParameters": "function getNumParameters() {\n    return 3;\n}",
        "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 1 / 1;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    default:\n        return value;\n    }\n}",
        "subpatches": {},
        "isPolyphonic": false
      },
      "p_02": {
        "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
        "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 2);\n            }\n\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
        "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 2);\n            }\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    default:\n        return value;\n    }\n}",
        "getNumParameters": "function getNumParameters() {\n    return 3;\n}",
        "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 1 / 1;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    default:\n        return value;\n    }\n}",
        "subpatches": {},
        "isPolyphonic": false
      },
      "p_03": {
        "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
        "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 2);\n            }\n\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
        "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 2);\n            }\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    default:\n        return value;\n    }\n}",
        "getNumParameters": "function getNumParameters() {\n    return 3;\n}",
        "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 1 / 1;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    default:\n        return value;\n    }\n}",
        "subpatches": {},
        "isPolyphonic": false
      },
      "p_04": {
        "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
        "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 2);\n            }\n\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
        "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 2);\n            }\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    default:\n        return value;\n    }\n}",
        "getNumParameters": "function getNumParameters() {\n    return 3;\n}",
        "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 1 / 1;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    default:\n        return value;\n    }\n}",
        "subpatches": {},
        "isPolyphonic": false
      }
    },
    "isPolyphonic": false
  },
  "presetid": "rnbo",
  "meta": {
    "architecture": "x64",
    "filename": "tlop2.maxpat",
    "maxversion": "8.5.1",
    "rnboversion": "1.0.1"
  }
}